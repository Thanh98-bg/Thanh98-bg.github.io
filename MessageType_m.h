//
// Generated file, do not edit! Created by nedtool 5.6 from MessageType.msg.
//

#ifndef __MESSAGETYPE_M_H
#define __MESSAGETYPE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>MessageType.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message ClusterMessage
 * {
 *     int proto;
 *     int srcAddress;
 *     int destAddress;
 * }
 * </pre>
 */
class ClusterMessage : public ::omnetpp::cMessage
{
  protected:
    int proto;
    int srcAddress;
    int destAddress;

  private:
    void copy(const ClusterMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ClusterMessage&);

  public:
    ClusterMessage(const char *name=nullptr, short kind=0);
    ClusterMessage(const ClusterMessage& other);
    virtual ~ClusterMessage();
    ClusterMessage& operator=(const ClusterMessage& other);
    virtual ClusterMessage *dup() const override {return new ClusterMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getProto() const;
    virtual void setProto(int proto);
    virtual int getSrcAddress() const;
    virtual void setSrcAddress(int srcAddress);
    virtual int getDestAddress() const;
    virtual void setDestAddress(int destAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ClusterMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ClusterMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MessageType.msg:22</tt> by nedtool.
 * <pre>
 * //REQ_CLUSTER MESSAGE 
 * message ReqClusterMessage extends ClusterMessage
 * {
 *     int energy;
 *     //int id;
 *     double FCH;
 *     //string displayString = "i=no,no,30%";
 *     int nrMemEvent; //luu so luong cac node trong su 
 * }
 * </pre>
 */
class ReqClusterMessage : public ::ClusterMessage
{
  protected:
    int energy;
    double FCH;
    int nrMemEvent;

  private:
    void copy(const ReqClusterMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReqClusterMessage&);

  public:
    ReqClusterMessage(const char *name=nullptr, short kind=0);
    ReqClusterMessage(const ReqClusterMessage& other);
    virtual ~ReqClusterMessage();
    ReqClusterMessage& operator=(const ReqClusterMessage& other);
    virtual ReqClusterMessage *dup() const override {return new ReqClusterMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getEnergy() const;
    virtual void setEnergy(int energy);
    virtual double getFCH() const;
    virtual void setFCH(double FCH);
    virtual int getNrMemEvent() const;
    virtual void setNrMemEvent(int nrMemEvent);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReqClusterMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReqClusterMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MessageType.msg:30</tt> by nedtool.
 * <pre>
 * //TDMA MESSAGE
 * message TDMAMessage extends ClusterMessage
 * {
 *     int frames; 	//so luong frame/round
 *     int frameTime;  //so luong TS/frame
 *     int tdma[]; 	//mang luu ID cua cac member trong cum
 * }
 * </pre>
 */
class TDMAMessage : public ::ClusterMessage
{
  protected:
    int frames;
    int frameTime;
    int *tdma; // array ptr
    unsigned int tdma_arraysize;

  private:
    void copy(const TDMAMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TDMAMessage&);

  public:
    TDMAMessage(const char *name=nullptr, short kind=0);
    TDMAMessage(const TDMAMessage& other);
    virtual ~TDMAMessage();
    TDMAMessage& operator=(const TDMAMessage& other);
    virtual TDMAMessage *dup() const override {return new TDMAMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFrames() const;
    virtual void setFrames(int frames);
    virtual int getFrameTime() const;
    virtual void setFrameTime(int frameTime);
    virtual void setTdmaArraySize(unsigned int size);
    virtual unsigned int getTdmaArraySize() const;
    virtual int getTdma(unsigned int k) const;
    virtual void setTdma(unsigned int k, int tdma);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TDMAMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TDMAMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MessageType.msg:36</tt> by nedtool.
 * <pre>
 * //DATA TO CH
 * message DataToCHMessage extends ClusterMessage
 * {
 *     int clusterHead;
 *     int data;
 * }
 * </pre>
 */
class DataToCHMessage : public ::ClusterMessage
{
  protected:
    int clusterHead;
    int data;

  private:
    void copy(const DataToCHMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataToCHMessage&);

  public:
    DataToCHMessage(const char *name=nullptr, short kind=0);
    DataToCHMessage(const DataToCHMessage& other);
    virtual ~DataToCHMessage();
    DataToCHMessage& operator=(const DataToCHMessage& other);
    virtual DataToCHMessage *dup() const override {return new DataToCHMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getClusterHead() const;
    virtual void setClusterHead(int clusterHead);
    virtual int getData() const;
    virtual void setData(int data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataToCHMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataToCHMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MessageType.msg:41</tt> by nedtool.
 * <pre>
 * //ACK RELAY REPLY TO CH
 * message ACKRelayMessage extends ClusterMessage
 * {
 *     int energy;//nl con lai cua node
 *     int distBS;
 *     int status;
 *     int xpos;
 *     int ypos;
 * }
 * </pre>
 */
class ACKRelayMessage : public ::ClusterMessage
{
  protected:
    int energy;
    int distBS;
    int status;
    int xpos;
    int ypos;

  private:
    void copy(const ACKRelayMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ACKRelayMessage&);

  public:
    ACKRelayMessage(const char *name=nullptr, short kind=0);
    ACKRelayMessage(const ACKRelayMessage& other);
    virtual ~ACKRelayMessage();
    ACKRelayMessage& operator=(const ACKRelayMessage& other);
    virtual ACKRelayMessage *dup() const override {return new ACKRelayMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getEnergy() const;
    virtual void setEnergy(int energy);
    virtual int getDistBS() const;
    virtual void setDistBS(int distBS);
    virtual int getStatus() const;
    virtual void setStatus(int status);
    virtual int getXpos() const;
    virtual void setXpos(int xpos);
    virtual int getYpos() const;
    virtual void setYpos(int ypos);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ACKRelayMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ACKRelayMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>MessageType.msg:49</tt> by nedtool.
 * <pre>
 * //DATA TO BS MESSAGE
 * message Data2BSMessage extends ClusterMessage
 * {
 *     int data;
 * }
 * </pre>
 */
class Data2BSMessage : public ::ClusterMessage
{
  protected:
    int data;

  private:
    void copy(const Data2BSMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Data2BSMessage&);

  public:
    Data2BSMessage(const char *name=nullptr, short kind=0);
    Data2BSMessage(const Data2BSMessage& other);
    virtual ~Data2BSMessage();
    Data2BSMessage& operator=(const Data2BSMessage& other);
    virtual Data2BSMessage *dup() const override {return new Data2BSMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getData() const;
    virtual void setData(int data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Data2BSMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Data2BSMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MESSAGETYPE_M_H

